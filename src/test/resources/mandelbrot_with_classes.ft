// Parameters that can be edited from the menu

extern maxIterationCount: "Maximum Iteration Count" = "250";
extern function: "Function (z[n])" = "z^2 + c";
extern maxExponent: "Exponent" = "2";
extern isJuliaSet: "Julia Set Mode" = "false";
extern juliaSetParameter: "Julia Set Parameter" = "0 : -1";
extern z0: "Start Value (z[0])" = "0:0";
extern bailoutRadius: "Bailout Radius" = "64";
extern bailoutValue: "Color Value when Bailout is exceeded" = "log(n + continuousAddend)";
extern bailoutHeight: "Height when Bailout is exceeded" = "re value";
extern epsilonRadius: "Epsilon Radius" = "1e-9";
extern lakeValue: "Color Value for Lake" = "absZ : absDz";
extern lakeHeight: "Height for Lake" = "re value";

// Parameters that are used by the system to eg determine how many palettes there should be.

declareScale(-2, 0, 0, -2, 0, 0);
declarePalette("Bailout Palette", 4, 1, [0, 0, #ffff0000], [1, 0, #ffffff00], [2, 0, #ffffffff], [3, 0, #ff0000ff]);
declarePalette("Lake Palette", 1, 1, [0, 0, #ff000000]);

/*
 * Fract default file. At the bottom all extern parameters are defined. 
 */
class Calculator {
	// iteration counter
	var n: Int = 0; 
	
	// parameter
	var c: Cplx = if(isJuliaSet) 
		juliaSetParameter 
	else 
		point;
		
	// z[n]
	var z: Cplx = if(isJuliaSet) 
		point 
	else 
		z0; 
	
	// z[n-1]
	var lastZ: Cplx = 0:0;

	/*
	 * Performs one full calculation step
	 * z, lastZ and n are modified.
	 * true is returned if none of the break conditions succeeds.
	 */
	fun step() { 
		var nextZ = function;
		lastZ = z;
		z = nextZ;
		
		var absZ = rad z;
		var absDz = abs (z - lastZ);

		if(not next(maxIterationCount, n) or absDz < epsilonRadius) {
			// lake
			var value = lakeValue;
			setResult(1, value, lakeHeight);
			
			false
		} else (absZ < bailoutRadius) or {
			// bailout
			var continuousAddend = 
				1 - log(log absZ / log bailoutValue) / log maxExponent;

			var value = bailoutValue;
			setResult(0, value, bailoutHeight);
			
			false
		}
	}
}

// Main starts here. It is rather simple and linear.

val calculator = Calculator()

while (
	calculator.step()
);

