    // Add at 0
    // Add[0]
    case 0: data[code[pc + 3]] = data[code[pc + 1]] + data[code[pc + 2]]};pc += 4; break;
    // Add[1]
    case 1: data[code[pc + 6]] = code[pc + 1] + data[code[pc + 5]]};pc += 7; break;
    // Add[2]
    case 2: *((double*) (&data[code[pc + 3]])) = *((double*) (&data[code[pc + 1]])) + *((double*) (&data[code[pc + 2]]))};pc += 4; break;
    // Add[3]
    case 3: *((double*) (&data[code[pc + 10]])) = *((double*) (&code[pc + 1])) + *((double*) (&data[code[pc + 9]]))};pc += 11; break;
    // Add[4]
    case 4: *((double2*) (&data[code[pc + 3]])) = *((double2*) (&data[code[pc + 1]])) + *((double2*) (&data[code[pc + 2]]))};pc += 4; break;
    // Add[5]
    case 5: *((double2*) (&data[code[pc + 18]])) = *((double2*) (&code[pc + 1])) + *((double2*) (&data[code[pc + 17]]))};pc += 19; break;
    // Sub at 6
    // Sub[0]
    case 6: data[code[pc + 3]] = data[code[pc + 1]] - data[code[pc + 2]]};pc += 4; break;
    // Sub[1]
    case 7: data[code[pc + 6]] = code[pc + 1] - data[code[pc + 5]]};pc += 7; break;
    // Sub[2]
    case 8: *((double*) (&data[code[pc + 3]])) = *((double*) (&data[code[pc + 1]])) - *((double*) (&data[code[pc + 2]]))};pc += 4; break;
    // Sub[3]
    case 9: *((double*) (&data[code[pc + 10]])) = *((double*) (&code[pc + 1])) - *((double*) (&data[code[pc + 9]]))};pc += 11; break;
    // Sub[4]
    case 10: *((double2*) (&data[code[pc + 3]])) = *((double2*) (&data[code[pc + 1]])) - *((double2*) (&data[code[pc + 2]]))};pc += 4; break;
    // Sub[5]
    case 11: *((double2*) (&data[code[pc + 18]])) = *((double2*) (&code[pc + 1])) - *((double2*) (&data[code[pc + 17]]))};pc += 19; break;
    // Mul at 12
    // Mul[0]
    case 12: data[code[pc + 3]] = data[code[pc + 1]] * data[code[pc + 2]]};pc += 4; break;
    // Mul[1]
    case 13: data[code[pc + 6]] = code[pc + 1] * data[code[pc + 5]]};pc += 7; break;
    // Mul[2]
    case 14: *((double*) (&data[code[pc + 3]])) = *((double*) (&data[code[pc + 1]])) * *((double*) (&data[code[pc + 2]]))};pc += 4; break;
    // Mul[3]
    case 15: *((double*) (&data[code[pc + 10]])) = *((double*) (&code[pc + 1])) * *((double*) (&data[code[pc + 9]]))};pc += 11; break;
    // Mul[4]
    case 16: *((double2*) (&data[code[pc + 3]])) = *((double2*) (&data[code[pc + 1]])) * *((double2*) (&data[code[pc + 2]]))};pc += 4; break;
    // Mul[5]
    case 17: *((double2*) (&data[code[pc + 18]])) = *((double2*) (&code[pc + 1])) * *((double2*) (&data[code[pc + 17]]))};pc += 19; break;
    // Div at 18
    // Div[0]
    case 18: data[code[pc + 3]] = data[code[pc + 1]] / data[code[pc + 2]]};pc += 4; break;
    // Div[1]
    case 19: data[code[pc + 6]] = code[pc + 1] / data[code[pc + 5]]};pc += 7; break;
    // Div[2]
    case 20: *((double*) (&data[code[pc + 3]])) = *((double*) (&data[code[pc + 1]])) / *((double*) (&data[code[pc + 2]]))};pc += 4; break;
    // Div[3]
    case 21: *((double*) (&data[code[pc + 10]])) = *((double*) (&code[pc + 1])) / *((double*) (&data[code[pc + 9]]))};pc += 11; break;
    // Div[4]
    case 22: *((double2*) (&data[code[pc + 3]])) = *((double2*) (&data[code[pc + 1]])) / *((double2*) (&data[code[pc + 2]]))};pc += 4; break;
    // Div[5]
    case 23: *((double2*) (&data[code[pc + 18]])) = *((double2*) (&code[pc + 1])) / *((double2*) (&data[code[pc + 17]]))};pc += 19; break;
    // Mod at 24
    // Mod[0]
    case 24: data[code[pc + 3]] = data[code[pc + 1]] % data[code[pc + 2]]};pc += 4; break;
    // Mod[1]
    case 25: data[code[pc + 6]] = code[pc + 1] % data[code[pc + 5]]};pc += 7; break;
    // Neg at 26
    // Neg[0]
    case 26: data[code[pc + 2]] = -data[code[pc + 1]];pc += 3; break;
    // Neg[1]
    case 27: *((double*) (&data[code[pc + 2]])) = -*((double*) (&data[code[pc + 1]]));pc += 3; break;
    // Neg[2]
    case 28: *((double2*) (&data[code[pc + 2]])) = -*((double2*) (&data[code[pc + 1]]));pc += 3; break;
    // Assign at 29
    // Assign[0]
    case 29: data[code[pc + 1]] = data[code[pc + 2]]; pc += 3; break;
    // Assign[1]
    case 30: data[code[pc + 1]] = code[pc + 2]; pc += 6; break;
    // Assign[2]
    case 31: *((double*) (&data[code[pc + 1]])) = *((double*) (&data[code[pc + 2]])); pc += 3; break;
    // Assign[3]
    case 32: *((double*) (&data[code[pc + 1]])) = *((double*) (&code[pc + 2])); pc += 10; break;
    // Assign[4]
    case 33: *((double2*) (&data[code[pc + 1]])) = *((double2*) (&data[code[pc + 2]])); pc += 3; break;
    // Assign[5]
    case 34: *((double2*) (&data[code[pc + 1]])) = *((double2*) (&code[pc + 2])); pc += 18; break;
    // Jump at 35
    // Jump[0]
    case 35: pc = code[pc + 1];break;
    // Equal at 36
    // Equal[0]
    case 36: if(data[code[pc + 1]] == data[code[pc + 2]]) pc = code[pc + 3]; else pc = code[pc + 3 + 1];break;
    // Equal[1]
    case 37: if(code[pc + 1] == data[code[pc + 5]]) pc = code[pc + 6]; else pc = code[pc + 6 + 1];break;
    // Less at 38
    // Less[0]
    case 38: if(data[code[pc + 1]] < data[code[pc + 2]]) pc = code[pc + 3]; else pc = code[pc + 3 + 1];break;
    // Less[1]
    case 39: if(code[pc + 1] < data[code[pc + 5]]) pc = code[pc + 6]; else pc = code[pc + 6 + 1];break;
    // Less[2]
    case 40: if(*((double*) (&data[code[pc + 1]])) < *((double*) (&data[code[pc + 2]]))) pc = code[pc + 3]; else pc = code[pc + 3 + 1];break;
    // Less[3]
    case 41: if(*((double*) (&code[pc + 1])) < *((double*) (&data[code[pc + 9]]))) pc = code[pc + 10]; else pc = code[pc + 10 + 1];break;
