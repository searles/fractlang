// Names of parameters

val maxIterationLabel = "Maximum Iteration Count";
val functionLabel = "Function (z[n])";
val maxExponentLabel = "Maximum Exponent";
val isJuliaSetLabel = "Julia Set";
val juliaSetParameterLabel = "Julia Set Parameter";
val z0Label = "Start Value (z[0])";
val bailoutRadiusLabel = "Bailout Radius";
val bailoutValueLabel = "Bailout Color Value";
val bailoutHeightLabel = "Bailout Height";
val bailoutPaletteLabel = "Bailout Palette";
val epsilonRadiusLabel = "Epsilon Radius";
val lakeValueLabel = "Lake Color Value";
val lakeHeightLabel = "Lake Height";
val lakePaletteLabel = "Lake Palette";

// Parameters that are used by the system to eg determine how many palettes there should be.

declareScale(2, 0, 0, 2, 0, 0);

declarePalette(lakePaletteLabel, 1, 1, [0, 0, #ff000000]);

declarePalette(bailoutPaletteLabel, 6, 1,
  [0, 0, #ff000000], [1, 0, #ff4400aa], [5, 0, #ff4400aa], [2, 0, #ffffdd22], [4, 0, #ffffdd22], [3, 0, #ffffffff]);

extern maxIteration: maxIterationLabel = "2500";

/*
 * Fract default file. At the bottom all extern parameters are defined.
 */
class Calculator {
  // iteration counter
  var n: Int = 0;

  extern isJuliaSet: isJuliaSetLabel = "false";

  // parameter
  var c: Cplx = if(isJuliaSet) {
    extern juliaSetParameter: juliaSetParameterLabel = "0: -1";
    juliaSetParameter
  } else {
    point;
  }

  // z[n]
  var z: Cplx = if(isJuliaSet)
    point
  else {
    extern z0: z0Label = "0";
    z0;
  }

  // z[n-1]
  var lastZ: Cplx = 0:0;

  /*
   * Performs one full calculation step
   * z, lastZ and n are modified.
   * true is returned if none of the break conditions succeeds.
   */
  fun step() {
    extern function: functionLabel = "z^2 + c";
    var nextZ = function;

    plot nextZ;

    var radZ = rad nextZ;

    var dz = nextZ - z;
    var radDz = rad dz;

    extern bailoutRadius: bailoutRadiusLabel = "64";

    if(radZ >= bailoutRadius) {
      extern maxExponent: maxExponentLabel = "2";

      // bailout
      var continuousAddend =
        1 - log(log radZ / log bailoutRadius) / log maxExponent;

      extern bailoutValue: bailoutValueLabel = "log(n + continuousAddend + 20.08)";
      extern bailoutHeight: bailoutHeightLabel = "re value";

      var value = bailoutValue;

      setResult(1, value, bailoutHeight);

      false
    } else {
      extern lakeValue: lakeValueLabel = "radDz : radZ";
      extern lakeHeight: lakeHeightLabel = "re value";

      extern epsilonRadius: epsilonRadiusLabel = "1e-9";

      if(radDz < epsilonRadius) {
        // convergent, thus lake.
        // for magnet, another value might be of interest.
        var value = lakeValue;
        setResult(0, value, lakeHeight);

        false
      } else if(not next(maxIteration, n)) {
        // lake
        var value = lakeValue;
        setResult(0, value, lakeHeight);

        false
      } else {
        // next step.
        lastZ = z;
        z = nextZ;

        true
      }
    }
  }
}

// Main starts here. It is rather simple and linear.

val calculator = Calculator()

while (
  calculator.step()
);